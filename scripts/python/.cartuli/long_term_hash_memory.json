{"3462c63bca323787cd0dea8615b028d5db0effa8ea54ce2dae01385c852ddcc8": ["def calculate_average(numbers):\r\n    sum_ = 0\r\n    count = 0\r\n    for i in range(len(numbers)):\r\n        sum_ += numbers[i]\r\n        count += 1\r\n    average = sum_ / count\r\n    return average\r\n\r\n# Test the function\r\nnums = [2, 4, 6, 8, 10]\r\nresult = calculate_average(nums)\r\nprint(\"The average is: \" + str(result))", "ginea_pig.rfct.py"], "6678d84e890b527f8d93f07445e07e780dce81ffbf8117908a5087222b5b7aca": ["def is_prime(number):\r\n    if number <= 1:\r\n        return False\r\n    for i in range(2, int(number ** 0.5) + 1):\r\n        if number % i == 0:\r\n            return False\r\n    return True\r\n\r\ndef calculate_primes(limit):\r\n    primes = []\r\n    for num in range(2, limit):\r\n        if is_prime(num):\r\n            primes.append(num)\r\n    return primes\r\n\r\nif __name__ == \"__main__\":\r\n    limit = int(input(\"Enter the limit (less than 10000): \"))\r\n    if limit > 10000:\r\n        print(\"Limit should be less than 10000\")\r\n    else:\r\n        primes = calculate_primes(limit)\r\n        print(\"Prime numbers up to\", limit, \"are:\")\r\n        print(primes)", "ginea_pig_prime_numbers.rfct.py"], "033d824e8e20f5dd39971042ecf0111b54e6cb6a10937c354710fcd1c6ef387a": ["import unittest\r\n\r\ndef calculate_average1(numbers: list) -> float:\r\n    total = 0\r\n    for number in numbers:\r\n        total += number\r\n    if numbers:\r\n        return total / len(numbers)\r\n    else:\r\n        return 0\r\n\r\nclass TestCalculateAverage(unittest.TestCase):\r\n    def test_average_calculation(self):\r\n        nums = [2, 4, 6, 8, 10]\r\n        result = calculate_average1(nums)\r\n        self.assertAlmostEqual(result, 6.0, places=2)\r\n\r\n    def test_empty_list(self):\r\n        nums = []\r\n        result = calculate_average1(nums)\r\n        self.assertEqual(result, 0)\r\n\r\n    def test_single_number(self):\r\n        nums = [5]\r\n        result = calculate_average1(nums)\r\n        self.assertEqual(result, 5.0)\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "unit_test.py"]}